/* 
	jQuery.orderTable 1.1.1
	https://github.com/VivienLN/jquery.ordertable
*/


//  func for search in table
function Search_Gridview(strKey, strGV, index_td) {
    var tr, td, i, txtValue;
    var strData = strKey.value.toUpperCase();
    tr = strGV.getElementsByTagName("tr");
    for (i = 2; i < tr.length; i++) {
        td = tr[i].getElementsByTagName("td")[index_td];
        if (td) {
            txtValue = td.textContent || td.innerText;
            if (txtValue.toUpperCase().indexOf(strData) > -1) {
                tr[i].style.display = "";
            } else {
                tr[i].style.display = "none";
            }
        }
    }
}
function CreateSearch_Gridview(includeColumns) {
    // create search text box in all table
    $('table').append(
        function () {
            var my = '';
            var query = my.concat('#', this.id, ' ', ' tr:nth-child(1) th');
            var counttd = $(query).length;
            query = my.concat('#', this.id, ' ', ' tr:nth-child(1)');
            $(query)
                .after($('<tr>')
                    .attr('align', 'center')
                    .attr('id', 'Filter')
                    .attr('valign', 'middle')
                    .attr('style', 'color:Black;color:White;font-weight:bold;display:none')
                    .attr('class', 'Filter')
                );

            for (var i = 0; i < counttd; i++) {
                query = my.concat('#', this.id, ' ', ' tr:nth-child(2)');
                var id11 = '';
                var title = this.text;
                id11 = 'this,'
                id11 += this.id;

                if (!includeColumns.includes(i)) {
                    $(query).append($('<th>')
                        .append($('<input>')
                            .attr('type', 'text')
                            .attr('placeholder', 'Filter')
                            .attr('class', 'form-control filter')
                            .attr('autocomplete', 'off')
                            .attr('name', '⁄‰Ê«‰ Œ»—	')
                            .attr('data-col', '⁄‰Ê«‰ Œ»—	')
                            .attr('onkeyup', 'Search_Gridview(' + id11 + ',' + i + ')')
                        )
                    );
                }
                else {
                    $(query).append($('<th>'));
                }

            }


        });

    $('table  tr:nth-child(1) th:nth-child(1)')
        .append($('<i class="fa fa-search-plus" aria-hidden="true"></i>')
            .attr('src', '../content/img/icon/filter_show.png')
            .attr('style', 'width: 25px;display: inline-block;font-size:16px;')
            .attr('id', 'ShowFilter')
        );
    $('table  tr:nth-child(1) th:nth-child(1)')
        .append($('<i class="fa fa-search-minus" aria-hidden="true"></i>')
            .attr('src', '../content/img/icon/filter_show.png')
            .attr('style', 'width: 25px;display: none;font-size:16px;')
            .attr('id', 'HideFilter')
        );
    $('#ShowFilter').click(function () {
        $("#Filter").show();
        $("#ShowFilter").hide();
        $("#HideFilter").show();
    });
    $('#HideFilter').click(function () {
        $("#Filter").hide();
        $("#ShowFilter").show();
        $("#HideFilter").hide();
    });


}

!function (e) { var t = {}; t.init = function (n, s) { return s && !isNaN(s.excludeColumns) && s.excludeColumns % 1 === 0 && (s.excludeColumns = [s.excludeColumns]), t.options = e.extend({}, { buttonClass: "order-table", buttonAscClass: "order-table--asc", buttonDescClass: "order-table--desc", excludeRows: null, excludeColumns: [] }, s), n.each(function () { n.is("table") && t.initTable(e(this)) }), n }, t.initTable = function (n) { var s = t.options, o = e("th", n); for (var r in s.excludeColumns) s.excludeColumns[r] < 0 && (s.excludeColumns[r] = o.length + s.excludeColumns[r]); o = o.filter(function (e) { for (var t = 0; t < s.excludeColumns.length; t++)if (s.excludeColumns[t] == e) return !1; return !0 }), n.data("$headings", o), o.addClass(s.buttonClass).click(t.orderToggle) }, t.orderToggle = function () { var n = t.options, s = e(this).closest("table").data("$headings"), o = e(this).hasClass(n.buttonAscClass); return s.removeClass(n.buttonAscClass).removeClass(n.buttonDescClass), e(this).addClass(o ? n.buttonDescClass : n.buttonAscClass), t.order(this, o) }, t.orderAsc = function () { return t.order(this) }, t.orderDesc = function () { return t.order(this, !0) }, t.order = function (n, s) { var o = e(n).closest("th").index(), r = e(n).closest("table"); return t.orderColumn(r, o, s) }, t.orderColumn = function (n, s, o) { var r = e("td:nth-child(" + (s + 1) + ")", n); return r.sort(function (n, s) { var r = e(n).attr("data-ordertable-value"), l = e(s).attr("data-ordertable-value"), a = "undefined" == typeof r ? n.innerText || n.textContent : r, u = "undefined" == typeof l ? s.innerText || s.textContent : l, i = parseInt(a), c = parseInt(u), d = o ? -1 : 1, C = t.options.excludeRows; return C && e(n).closest(C).length ? -1 : C && e(s).closest(C).length ? 1 : isNaN(i) || isNaN(c) ? a.localeCompare(u) * d : (i - c) * d }), r.each(function () { n.append(e(this).closest("tr")) }), !1 }, t.actionOrder = function (e) { e = e || {}; var n = e.column, s = "desc" === e.order; isNaN(n) || t.orderColumn(this, n, s) }, t.actions = { order: t.actionOrder }, e.fn.extend({ orderTable: function (e, n) { return "string" == typeof e ? (t.actions[e].call(this, n), this) : t.init(this, e) } }) }(jQuery);